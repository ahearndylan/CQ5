import java.io.*;
import java.math.*;
import java.util.*;

class Result {

    /*
     * Complete the 'fibonacciModified' function below.
     *
     * The function is expected to return a BigInteger.
     * The function accepts following parameters:
     *  1. INTEGER t1
     *  2. INTEGER t2
     *  3. INTEGER n
     */

    public static BigInteger fibonacciModified(int t1, int t2, int n) {
        BigInteger b1 = BigInteger.valueOf(t1);
        BigInteger b2 = BigInteger.valueOf(t2);

        return fibonacciModifiedHelper(b1, b2, n);
    }

    private static BigInteger fibonacciModifiedHelper(BigInteger b1, BigInteger b2, int n) {
        if (n == 1) return b1;
        if (n == 2) return b2;
        return fibonacciModifiedHelper(b1, b2, n - 2).add(fibonacciModifiedHelper(b1, b2, n - 1).multiply(fibonacciModifiedHelper(b1, b2, n - 1)));
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int t1 = Integer.parseInt(firstMultipleInput[0]);
        int t2 = Integer.parseInt(firstMultipleInput[1]);
        int n = Integer.parseInt(firstMultipleInput[2]);

        BigInteger result = Result.fibonacciModified(t1, t2, n);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
